
import pandas as pd
import time
import os

def step_function_template(config, step_name, output_files, input_files=[]):
    print(f"Running: {step_name}")
    
    # 检查输入文件是否存在
    for f in input_files:
        if not os.path.exists(getattr(config, f)):
             print(f"Error: Input file {getattr(config, f)} not found for {step_name}.")
             # 创建一个空的伪输出以避免后续步骤立即失败
             for out_f_key in output_files:
                 pd.DataFrame().to_parquet(getattr(config, out_f_key))
             return False # 表示失败

    # 模拟工作并创建虚拟输出文件
    for out_f_key in output_files:
        output_path = getattr(config, out_f_key)
        print(f"Creating dummy file: {output_path}")
        if str(output_path).endswith('.parquet'):
            pd.DataFrame({'data': [step_name]}).to_parquet(output_path)
        elif str(output_path).endswith(('.json', '.jsonl')):
            with open(output_path, 'w') as f:
                f.write(f'{{"step": "{step_name}"}}')
    time.sleep(1)
    return True

def step_1_initial_english_match(config):
    return step_function_template(config, "Step 1", ["MATCHED_EN_FILE", "UNMATCHED_EN_FILE"])

def step_2_translate_unmatched(config):
    return step_function_template(config, "Step 2", ["TRANSLATED_JSONL_FILE"], ["UNMATCHED_EN_FILE"])

def step_3_candidate_matching(config):
    return step_function_template(config, "Step 3", ["META_MATCH_JSON_FILE", "META_PARTIAL_EXACT_MATCHED_FILE", "AI_META_INPUT_FILE"], ["TRANSLATED_JSONL_FILE"])

def step_4_ai_candidate_selection(config):
    return step_function_template(config, "Step 4", ["AI_META_OUTPUT_JSONL_FILE", "ALL_MATCHES_COMBINED_FILE", "JUDGE_INPUT_FILE"], ["AI_META_INPUT_FILE"])

def step_5_ai_judgment(config):
    return step_function_template(config, "Step 5", ["FINAL_JUDGE_OUTPUT_JSONL_FILE"], ["JUDGE_INPUT_FILE"])

def generate_comprehensive_report(config):
    print("Running: Generate Report")
    report_path = config.FINAL_REPORT_OUTPUT_FILE
    
    html_content = '''
    <html>
    <head><title>Comprehensive Report</title></head>
    <body style="font-family: sans-serif; background-color: #f0f2f5; padding: 20px;">
        <h1>Final Comprehensive Report</h1>
        <p>This is a dummy report generated by the pipeline.</p>
        <h2>Summary</h2>
        <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse; width: 50%;">
            <tr><th style="text-align: left;">Metric</th><th>Value</th></tr>
            <tr><td>Total Records Processed</td><td>1000</td></tr>
            <tr><td>Successfully Matched</td><td>950</td></tr>
            <tr><td>Failed Matches</td><td>50</td></tr>
        </table>
    </body>
    </html>
    '''
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    time.sleep(1)
    return True
